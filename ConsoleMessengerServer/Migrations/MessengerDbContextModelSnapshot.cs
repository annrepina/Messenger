// <auto-generated />
using System;
using ConsoleMessengerServer.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsoleMessengerServer.Migrations
{
    [DbContext(typeof(MessengerDbContext))]
    partial class MessengerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsoleMessengerServer.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.Dialog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Dialogs");
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("DialogId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DialogId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("PhoneNumber");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("PersonId");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("DialogUserAccount", b =>
                {
                    b.Property<int>("DialogsId")
                        .HasColumnType("int");

                    b.Property<int>("UserAccountsId")
                        .HasColumnType("int");

                    b.HasKey("DialogsId", "UserAccountsId");

                    b.HasIndex("UserAccountsId");

                    b.ToTable("DialogUserAccount");
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.Client", b =>
                {
                    b.HasOne("ConsoleMessengerServer.Entities.UserAccount", "UserAccount")
                        .WithMany("Clients")
                        .HasForeignKey("UserAccountId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.Message", b =>
                {
                    b.HasOne("ConsoleMessengerServer.Entities.Dialog", "Dialog")
                        .WithMany("Messages")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleMessengerServer.Entities.UserAccount", "UserAccount")
                        .WithMany("Messages")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialog");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.UserAccount", b =>
                {
                    b.HasOne("ConsoleMessengerServer.Entities.Person", "Person")
                        .WithOne("UserAccount")
                        .HasForeignKey("ConsoleMessengerServer.Entities.UserAccount", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DialogUserAccount", b =>
                {
                    b.HasOne("ConsoleMessengerServer.Entities.Dialog", null)
                        .WithMany()
                        .HasForeignKey("DialogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleMessengerServer.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.Dialog", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.Person", b =>
                {
                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ConsoleMessengerServer.Entities.UserAccount", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
